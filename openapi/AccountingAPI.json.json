{
  "openapi": "3.0.0",
  "info": {
    "title": "Accounting API (Legacy Support)",
    "description": "**Note**: Support for this API is only for existing developers. We are no longer onboarding new developers to this API.\n\nBelow are specifications for a Brex accounting API to be used for pull-based integrations with accounting partners.\n",
    "contact": {
      "name": "Admin",
      "url": "https://brex.com",
      "email": "developer-access@brex.com"
    },
    "version": "1.2.2"
  },
  "servers": [
    {
      "url": "https://platform.staging.brexapps.com",
      "description": "Staging API (Note: this is not sandbox)"
    },
    {
      "url": "https://platform.brexapis.com",
      "description": "Production servers"
    }
  ],
  "tags": [
    {
      "name": "Accounts",
      "description": "Query data for Brex Cash and card accounts, transactions, and statements."
    }
  ],
  "paths": {
    "/v1/accounting/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get information for an account",
        "description": "This is the basic object that provides a top-level view of a company's available accounts.",
        "operationId": "getAccounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "example": {
                    "items": [
                      {
                        "id": "dpacc_12345",
                        "type": "ASSET",
                        "instrument": "CASH",
                        "name": "Company Name Cash Account",
                        "description": "Brex Cash Account",
                        "status": "ACTIVE",
                        "settlement_currency": "usd",
                        "current_balance": {
                          "amount": 888800,
                          "currency": "usd"
                        },
                        "available_balance": {
                          "amount": 3400,
                          "currency": "usd"
                        },
                        "cash": {
                          "account_number": "668288305125",
                          "routing_number": "122105100",
                          "current_statement_period": {
                            "start": "2020-02-01",
                            "end": "2020-02-31"
                          }
                        }
                      },
                      {
                        "id": "cuacc_12345",
                        "type": "LIABILITY",
                        "instrument": "CARD",
                        "name": "Company Name Card Account",
                        "description": "Brex Card Account",
                        "status": "ACTIVE",
                        "settlement_currency": "usd",
                        "current_balance": {
                          "amount": 666600,
                          "currency": "usd"
                        },
                        "available_balance": {
                          "amount": 3400,
                          "currency": "usd"
                        },
                        "card": {
                          "account_limit": {
                            "amount": 100000,
                            "currency": "usd"
                          },
                          "current_statement_period": {
                            "start": "2020-02-01",
                            "end": "2020-02-31"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "read:Accounts"
            ]
          }
        ]
      }
    },
    "/v1/accounting/accounts/{accountId}/transactions": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get transactions for an account",
        "description": "This endpoint supports both `PENDING` and `POSTED` transactions. For now, this endpoint will only return posted transactions. However, you should build against it assuming it returns both `PENDING` and `POSTED`.\n\nIf the transaction is `PENDING`, the `balance`, `posted_at`, and `statement_id` fields will be `null`.\n\nIf the transaction is `POSTED` but the statement has not closed yet, `statement_id` will be `null`.\n\nNote that `amount.amount` is the amount of a transaction, whereas `balance.amount` is the running balance of the account *including* the amount of this transaction. Most of the time, the 2 values will be different.\n\nAll amounts will have signage.\n\nFor **CASH**, a debit activity will have a **positive** value. *i.e. depositing a paycheck*. A credit activity will have a **negative** sign. *i.e. paying a bill via outgoing ACH transfer*.\n\nFor **CREDIT CARD**, a debit activity will have a **negative** value. *i.e. paying off the credit card bill*. A credit activity will have a **positive** sign. *i.e. purchasing coffee*.",
        "operationId": "getTransactions",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "ID of the account to get transactions for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Inclusive UTC ISO timestamp, optional. For posted transactions, this will filter on the `posted_at` field For pending transactions, this will filter on the `initiated_at` field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statement_id",
            "in": "query",
            "description": "If this parameter is given, only `POSTED` transactions will be returned",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "optional, maximum allowed is 100",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "next_cursor": {
                      "type": "string",
                      "nullable": true
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transaction"
                      }
                    }
                  },
                  "example": {
                    "next_cursor": "bGltaXQ9MjAmb2Zmc2V0PTE",
                    "items": [
                      {
                        "id": "ptx_1234",
                        "kind": "CARD",
                        "status": "POSTED",
                        "amount": {
                          "amount": 12340,
                          "currency": "usd"
                        },
                        "balance": {
                          "amount": 888800,
                          "currency": "usd"
                        },
                        "description": "Uber",
                        "initiated_at": "2019-09-01T00:00:00Z",
                        "posted_at": "2019-09-03T00:00:00Z",
                        "statement_id": "st_123",
                        "method": {
                          "type": "CREDIT_CARD",
                          "credit_card": {
                            "id": "card_1234",
                            "network": "VISA",
                            "last_four": "7890",
                            "first_six": "123456",
                            "cardholder_name": "First Last"
                          }
                        },
                        "card_transaction_details": {
                          "type": "PURCHASE",
                          "purchase": {
                            "raw_descriptor": "PAYPAL *UBER",
                            "mcc_code": "145"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "read:Accounts"
            ]
          }
        ]
      }
    },
    "/v1/accounting/accounts/{accountId}/statements": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get statements for an account",
        "description": "Retrieve the statement information for a given account. By default, it returns statements in order of `period.end` (latest first). The data returned by this endpoint is *immutable*, so it will only return *closed* statements. The current \"open\" statement (which is *mutable*) will not be returned.",
        "operationId": "getStatements",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "ID of the account to get statements for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next_cursor": {
                      "type": "string",
                      "nullable": true
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Statement"
                      }
                    }
                  },
                  "example": {
                    "next_cursor": "bGltaXQ9MjAmb2Zmc2V0PTE",
                    "items": [
                      {
                        "id": "pst_123",
                        "start_balance": {
                          "amount": 123400,
                          "currency": "usd"
                        },
                        "end_balance": {
                          "amount": 333000,
                          "currency": "usd"
                        },
                        "period": {
                          "start": "2019-09-01T00:00:00Z",
                          "end": "2019-09-30T23:59:59Z"
                        },
                        "document_url": "https://www.brex.com/assets/123"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "read:Accounts"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "required": [
          "available_balance",
          "current_balance",
          "description",
          "id",
          "instrument",
          "name",
          "settlement_currency",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "accountDetailType": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Unique account identifier",
            "example": "acc_12345"
          },
          "type": {
            "type": "string",
            "description": "Type of account, asset, or liability. If the `instrument` is `CARD`, the `type` will be `LIABILITY`. If `CASH`, the type will be `ASSET`. In the future, we may introduce additional asset or liability instruments.",
            "enum": [
              "ASSET",
              "LIABILITY"
            ]
          },
          "instrument": {
            "type": "string",
            "description": "CASH or CARD.",
            "enum": [
              "CASH",
              "CARD"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name on the account",
            "example": "Brex Card"
          },
          "description": {
            "type": "string",
            "description": "Display description",
            "example": "Brex Card Account"
          },
          "status": {
            "type": "string",
            "description": "Whether the account is active or inactive",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "settlement_currency": {
            "type": "string",
            "description": "lowercase string in ISO-4217 format",
            "example": "usd"
          },
          "current_balance": {
            "$ref": "#/components/schemas/Money"
          },
          "available_balance": {
            "$ref": "#/components/schemas/Money"
          }
        },
        "description": "Note about the `current_balance` field in `Account`: For Cash, it is the available balance in the account at the time of query. For Card, this is how much the account has spent (ie. outstanding balance) at the time of query.",
        "discriminator": {
          "propertyName": "accountDetailType",
          "mapping": {
            "card": "#/components/schemas/CardAccountDetails",
            "cash": "#/components/schemas/CashAccountDetails"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardAccountDetails"
          },
          {
            "$ref": "#/components/schemas/CashAccountDetails"
          }
        ]
      },
      "CashAccountDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Account"
          }
        ],
        "required": [
          "account_number",
          "routing_number"
        ],
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "example": "668288305125"
          },
          "routing_number": {
            "type": "string",
            "example": "1111234"
          },
          "current_statement_period": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        },
        "description": "This field will only be present if the `instrument` is of type `CASH`. The `current_statement_period` field is optional (Not present if the account is inactive)."
      },
      "CardAccountDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Account"
          }
        ],
        "required": [
          "account_limit"
        ],
        "type": "object",
        "properties": {
          "account_limit": {
            "$ref": "#/components/schemas/Money"
          },
          "current_statement_period": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        },
        "description": "This field will only be present if the `instrument` is of type `CARD`. The `current_statement_period` field is optional (Not present if the account is inactive)."
      },
      "Transaction": {
        "required": [
          "amount",
          "description",
          "id",
          "initiated_at",
          "method",
          "posted_at",
          "source_type",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the transaction",
            "example": "ptx_123"
          },
          "source_type": {
            "type": "string",
            "example": "CARD",
            "enum": [
              "CARD",
              "CASH"
            ]
          },
          "status": {
            "type": "string",
            "example": "POSTED",
            "enum": [
              "POSTED",
              "PENDING"
            ]
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "balance": {
            "$ref": "#/components/schemas/Money"
          },
          "method": {
            "$ref": "#/components/schemas/TransactionMethod"
          },
          "description": {
            "type": "string",
            "description": "mutable field",
            "example": "Uber"
          },
          "initiated_at": {
            "type": "string",
            "description": "ISO 8601 string",
            "example": "2019-09-01T00:00:00Z"
          },
          "posted_at": {
            "type": "string",
            "description": "ISO 8601 string",
            "example": "2019-09-03T00:00:00Z"
          },
          "statement_id": {
            "type": "string",
            "example": "st_123"
          }
        },
        "oneOf": [
          {
            "title": "CardTransactionDetails",
            "properties": {
              "card_transaction_details": {
                "$ref": "#/components/schemas/CardTransactionDetails"
              }
            }
          },
          {
            "title": "CashTransactionDetails",
            "properties": {
              "cash_transaction_details": {
                "$ref": "#/components/schemas/CashTransactionDetails"
              }
            }
          }
        ]
      },
      "TransactionMethod": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "CREDIT_CARD",
            "enum": [
              "CREDIT_CARD",
              "DEBIT_CARD",
              "ACH",
              "WIRE_TRANSFER",
              "CHECK",
              "BREX_NETWORK_TRANSFER",
              "OTHER"
            ]
          }
        },
        "description": "The `method` field of a CARD transaction can be `CREDIT_CARD`, `ACH`, `BREX_NETWORK_TRANSFER`\n\nThe `method` of a CASH transaction can be `ACH`, `WIRE_TRANSFER`, `BREX_NETWORK_TRANSFER`, `DEBIT_CARD`, `CHECK`",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "credit_card": "#/components/schemas/CreditCardMethod",
            "debit_card": "#/components/schemas/DebitCardMethod",
            "ach": "#/components/schemas/ACHMethod",
            "wire_transfer": "#/components/schemas/WireTransferMethod",
            "check": "#/components/schemas/CheckMethod",
            "brex_network_transfer": "#/components/schemas/BrexNetworkTransferMethod"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreditCardMethod"
          },
          {
            "$ref": "#/components/schemas/DebitCardMethod"
          },
          {
            "$ref": "#/components/schemas/ACHMethod"
          },
          {
            "$ref": "#/components/schemas/WireTransferMethod"
          },
          {
            "$ref": "#/components/schemas/CheckMethod"
          },
          {
            "$ref": "#/components/schemas/BrexNetworkTransferMethod"
          }
        ]
      },
      "CreditCardMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMethod"
          }
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "card_1234"
          },
          "network": {
            "type": "string",
            "example": "VISA"
          },
          "last_four": {
            "type": "string",
            "example": "1234"
          },
          "first_six": {
            "type": "string",
            "example": "111111"
          },
          "cardholder_name": {
            "type": "string",
            "example": "First Last"
          }
        }
      },
      "DebitCardMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMethod"
          }
        ],
        "type": "object"
      },
      "ACHMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMethod"
          }
        ],
        "type": "object"
      },
      "WireTransferMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMethod"
          }
        ],
        "type": "object"
      },
      "CheckMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMethod"
          }
        ],
        "type": "object"
      },
      "BrexNetworkTransferMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMethod"
          }
        ],
        "type": "object"
      },
      "CardTransactionDetails": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PAYMENT",
              "PURCHASE",
              "REFUND",
              "CHARGEBACK",
              "REWARDS_CREDIT",
              "OTHER"
            ]
          }
        },
        "description": "Details for a Card transaction.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "payment": "#/components/schemas/CardPaymentDetails",
            "purchase": "#/components/schemas/CardPurchaseDetails",
            "refund": "#/components/schemas/CardRefundDetails",
            "chargeback": "#/components/schemas/CardChargebackDetails",
            "rewards": "#/components/schemas/CardRewardsCreditDetails"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardPaymentDetails"
          },
          {
            "$ref": "#/components/schemas/CardPurchaseDetails"
          },
          {
            "$ref": "#/components/schemas/CardRefundDetails"
          },
          {
            "$ref": "#/components/schemas/CardChargebackDetails"
          },
          {
            "$ref": "#/components/schemas/CardRewardsCreditDetails"
          }
        ]
      },
      "CardPaymentDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Paying off the balance on a credit card. Returns an empty object `{}`, no additional fields at this time."
      },
      "CardPurchaseDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionDetails"
          }
        ],
        "required": [
          "card_id",
          "raw_descriptor"
        ],
        "type": "object",
        "properties": {
          "raw_descriptor": {
            "type": "string",
            "example": "PAYPAL *UBER"
          },
          "mcc_code": {
            "type": "string",
            "example": "145"
          }
        }
      },
      "CardRefundDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionDetails"
          }
        ],
        "required": [
          "card_id",
          "raw_descriptor"
        ],
        "type": "object",
        "properties": {
          "raw_descriptor": {
            "type": "string",
            "description": "Description of the refund",
            "example": "PAYPAL *UBER"
          },
          "mcc_code": {
            "type": "string",
            "example": "145"
          }
        }
      },
      "CardChargebackDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionDetails"
          }
        ],
        "required": [
          "card_id",
          "raw_descriptor"
        ],
        "type": "object",
        "properties": {
          "raw_descriptor": {
            "type": "string",
            "example": "PAYPAL *UBER"
          },
          "mcc_code": {
            "type": "string",
            "example": "145"
          }
        }
      },
      "CardRewardsCreditDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Rewards credit. Returns an empty object `{}`, no additional fields at this time."
      },
      "CashTransactionDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PAYMENT",
              "DIVIDEND",
              "FEE",
              "ADJUSTMENT",
              "INTEREST",
              "CARD_COLLECTION",
              "REWARDS_REDEMPTION",
              "FBO_TRANSFER",
              "RECEIVABLES_OFFERS_ADVANCE",
              "RECEIVABLES_OFFERS_COLLECTION",
              "BREX_OPERATIONAL_TRANSFER",
              "OTHER"
            ]
          }
        },
        "description": "Details for a Brex Cash transaction. `CashPaymentDetails` will only be present if the type is `PAYMENT`. Same for other types.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "payment": "#/components/schemas/CashPaymentDetails",
            "dividend": "#/components/schemas/CashDividendDetails",
            "fee": "#/components/schemas/CashFeeDetails",
            "adjustment": "#/components/schemas/CashAdjustmentDetails",
            "interest": "#/components/schemas/CashInterestDetails",
            "card_collection": "#/components/schemas/CashCardCollectionDetails",
            "rewards_redemption": "#/components/schemas/CashRewardsRedemptionDetails"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CashPaymentDetails"
          },
          {
            "$ref": "#/components/schemas/CashDividendDetails"
          },
          {
            "$ref": "#/components/schemas/CashFeeDetails"
          },
          {
            "$ref": "#/components/schemas/CashAdjustmentDetails"
          },
          {
            "$ref": "#/components/schemas/CashInterestDetails"
          },
          {
            "$ref": "#/components/schemas/CashCardCollectionDetails"
          },
          {
            "$ref": "#/components/schemas/CashRewardsRedemptionDetails"
          }
        ]
      },
      "CashPaymentDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashTransactionDetails"
          }
        ],
        "type": "object",
        "properties": {
          "counterparty": {
            "$ref": "#/components/schemas/CashCounterparty"
          },
          "bai2_code": {
            "type": "string",
            "example": "010"
          }
        }
      },
      "CashDividendDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Dividend collected in the Brex Cash account. Returns an empty object `{}`, no additional fields at this time."
      },
      "CashFeeDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Fee associated with the Brex Cash account. Returns an empty object `{}`, no additional fields at this time."
      },
      "CashAdjustmentDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Adjustment in the Brex Cash account. Returns an empty object `{}`, no additional fields at this time."
      },
      "CashInterestDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Interest earned in the Brex Cash account. Returns an empty object `{}`, no additional fields at this time."
      },
      "CashCardCollectionDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Card payment collection from the Brex Cash account. Returns an empty object `{}`, no additional fields at this time."
      },
      "CashRewardsRedemptionDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CashTransactionDetails"
          }
        ],
        "type": "object",
        "description": "Rewards redemption from the Brex Cash account. Returns an empty object `{}`, no additional fields at this time."
      },
      "CashCounterparty": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Counterparty Name"
          }
        }
      },
      "Statement": {
        "required": [
          "end_balance",
          "id",
          "period",
          "start_balance"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "pst_123"
          },
          "start_balance": {
            "$ref": "#/components/schemas/Money"
          },
          "end_balance": {
            "$ref": "#/components/schemas/Money"
          },
          "period": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "document_url": {
            "type": "string",
            "description": "Optional (currently unavailable)",
            "example": "https://www.brex.com/assets/123"
          }
        }
      },
      "Money": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "lowercase string in ISO-4217 format",
            "example": "usd"
          },
          "amount": {
            "type": "integer",
            "description": "amount in the currency's smallest unit (e.g. cents)",
            "example": 888000
          }
        }
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "ISO 8601 string",
            "example": "2019-10-01T00:00:00Z"
          },
          "end": {
            "type": "string",
            "description": "ISO 8601 string",
            "example": "2019-10-31T23:59:59Z"
          }
        }
      }
    },
    "securitySchemes": {
      "BrexOAuth2Authentication": {
        "type": "oauth2",
        "description": "OAuth2 security scheme. Users with the account admin or bookkeeper role may access the accounting API.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.brex.com/oauth2/v1/auth",
            "tokenUrl": "https://accounts.brex.com/oauth2/v1/token",
            "scopes": {
              "openid": "openid",
              "https://accounting.brexapis.com/cash": "Read Brex Cash account data",
              "https://accounting.brexapis.com/card": "Read Brex Card account data"
            }
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "x-explorer-enabled": false
}